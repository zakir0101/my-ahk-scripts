#InstallKeybdHook
; ******************* keymapping **************

AlT & i::SendRaw, <

AlT & o::SendRaw, >

AlT & p::SendRaw, |

;!Ã¼::SendRaw, ~ 

SHIFT & SC029::SendRaw, $ 

SC029::Send, {Text}^

AlT & 7::SendRaw, {

AlT & 0::SendRaw, }

AlT & 8::SendRaw, [

AlT & 9::SendRaw, ]



;***************** change Language shortcuts **************++++++ 


; https://autohotkey.com/boards/viewtopic.php?f=6&t=18519
SetDefaultKeyboardLang(LocaleID){
	Static SPI_SETDEFAULTINPUTLANG := 0x005A, SPIF_SENDWININICHANGE := 2	
	Lan := DllCall("LoadKeyboardLayout", "Str", Format("{:08x}", LocaleID), "Int", 0)
	VarSetCapacity(binaryLocaleID, 4, 0)
	NumPut(LocaleID, binaryLocaleID)
	; MsgBox,  , "Local iDS",% "Local ID: " LocaleID  "`nbinary ID : " &binaryLocaleID  "`nlanguage ID : "  Lan, 

	DllCall("SystemParametersInfo", "UInt", SPI_SETDEFAULTINPUTLANG, "UInt", 0, "UPtr", &binaryLocaleID, "UInt", SPIF_SENDWININICHANGE)	
	WinGet, windows, List
	Loop % windows {
		PostMessage 0x50, 0, % Lan, , % "ahk_id " windows%A_Index%
	}
}


; https://docs.microsoft.com/de-de/windows/desktop/Intl/language-identifier-constants-and-strings

!+1::SetDefaultKeyboardLang(0x0407)  ; german
!+2::SetDefaultKeyboardLang(0x02809) ; english
!+3::SetDefaultKeyboardLang(0x0401) ; arabic saudi arabia 





; *********************** change virtual desktop *********************l


; Globals
DesktopCount = 2 ; Windows starts with 2 desktops at boot
CurrentDesktop = 1 ; Desktop count is 1-indexed (Microsoft numbers them this way)
;
; This function examines the registry to build an accurate list of the current virtual desktops and which one we're currently on.
; Current desktop UUID appears to be in HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\SessionInfo\1\VirtualDesktops
; List of desktops appears to be in HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VirtualDesktops
;
mapDesktopsFromRegistry() {
    global CurrentDesktop, DesktopCount
    ; Get the current desktop UUID. Length should be 32 always, but there's no guarantee this couldn't change in a later Windows release so we check.
    IdLength := 32
    SessionId := getSessionId()
    if (SessionId) {
        RegRead, CurrentDesktopId, HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\SessionInfo\%SessionId%\VirtualDesktops, CurrentVirtualDesktop
        if (CurrentDesktopId) {
            IdLength := StrLen(CurrentDesktopId)
        }
    }
    ; Get a list of the UUIDs for all virtual desktops on the system
    RegRead, DesktopList, HKEY_CURRENT_USER, SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VirtualDesktops, VirtualDesktopIDs
    if (DesktopList) {
        DesktopListLength := StrLen(DesktopList)
        ; Figure out how many virtual desktops there are
        DesktopCount := DesktopListLength / IdLength
    }
    else {
        DesktopCount := 1
    }
    ; Parse the REG_DATA string that stores the array of UUID's for virtual desktops in the registry.
    i := 0
    while (CurrentDesktopId and i < DesktopCount) {
        StartPos := (i * IdLength) + 1
        DesktopIter := SubStr(DesktopList, StartPos, IdLength)
        OutputDebug, The iterator is pointing at %DesktopIter% and count is %i%.
        ; Break out if we find a match in the list. If we didn't find anything, keep the
        ; old guess and pray we're still correct :-D.
        if (DesktopIter = CurrentDesktopId) {
            CurrentDesktop := i + 1
            OutputDebug, Current desktop number is %CurrentDesktop% with an ID of %DesktopIter%.
            break
        }
        i++
    }
}
;
; This functions finds out ID of current session.
;
getSessionId()
{
    ProcessId := DllCall("GetCurrentProcessId", "UInt")
    if ErrorLevel {
        OutputDebug, Error getting current process id: %ErrorLevel%
        return
    }
    OutputDebug, Current Process Id: %ProcessId%
    DllCall("ProcessIdToSessionId", "UInt", ProcessId, "UInt*", SessionId)
    if ErrorLevel {
        OutputDebug, Error getting session id: %ErrorLevel%
        return
    }
    OutputDebug, Current Session Id: %SessionId%
    return SessionId
}
;
; This function switches to the desktop number provided.
;
switchDesktopByNumber(targetDesktop)
{
    global CurrentDesktop, DesktopCount
    ; Re-generate the list of desktops and where we fit in that. We do this because
    ; the user may have switched desktops via some other means than the script.
    mapDesktopsFromRegistry()
    ; Don't attempt to switch to an invalid desktop
    if (targetDesktop > DesktopCount || targetDesktop < 1) {
        OutputDebug, [invalid] target: %targetDesktop% current: %CurrentDesktop%
        return
    }
    ; Go right until we reach the desktop we want
    while(CurrentDesktop < targetDesktop) {
        Send ^#{Right}
        CurrentDesktop++
        OutputDebug, [right] target: %targetDesktop% current: %CurrentDesktop%
    }
    ; Go left until we reach the desktop we want
    while(CurrentDesktop > targetDesktop) {
        Send ^#{Left}
        CurrentDesktop--
        OutputDebug, [left] target: %targetDesktop% current: %CurrentDesktop%
    }
}


; Main
SetKeyDelay, 75
mapDesktopsFromRegistry()
OutputDebug, [loading] desktops: %DesktopCount% current: %CurrentDesktop%

; User config!
; This section binds the key combo to the switch/create/delete actions
LWin & 1::switchDesktopByNumber(1)
LWin & 2::switchDesktopByNumber(2)
LWin & 3::switchDesktopByNumber(3)
LWin & 4::switchDesktopByNumber(4)
LWin & 5::switchDesktopByNumber(5)
LWin & 6::switchDesktopByNumber(6)
LWin & 7::switchDesktopByNumber(7)
LWin & 8::switchDesktopByNumber(8)
LWin & 9::switchDesktopByNumber(9)




; *************************** change window by number *************************

showAll(){
	WinGet windows, List

	Loop %windows%
	{
		id := windows%A_Index%
		WinGetTitle wt, ahk_id %id%
		WinGetClass, wclass ,ahk_id %id%,
		WinGet, wProcName , ProcessName, ahk_id %id%
		If wt
			r .= id . ". " .  wt . "####" . wProcName . "### class : " . wclass "`n"

	}
	FileAppend %r% `n, *
	MsgBox %r%
}

openTerminal(){
	processName := "ahk_exe WindowsTerminal.exe"


	WinGetTitle title,  ahk_exe WindowsTerminal.exe
	if ( WinExist( "ahk_exe WindowsTerminal.exe") )
	{
		WinActivate,  ahk_exe WindowsTerminal.exe                             
		WinMaximize, ahk_exe WindowsTerminal.exe
	}
	else{
		Run, C:\Program Files\WindowsApps\microsoft.windowsterminal_1.19.11213.0_x64__8wekyb3d8bbwe\WindowsTerminal.exe
	}

}


openCode(){
	processName = ahk_exe Code.exe


	WinGetTitle title,  %processName%
	FileAppend, %title% , *
	if ( WinExist( processName) )
	{
		WinActivate,  %processName%                             
		WinMaximize, %processName%
	}
	else{
		Run, code
	}

}

openMatlab(){
	processName = ahk_exe matlab.exe


	WinGetTitle title,  %processName%
	FileAppend, %title% , *
	if ( WinExist( processName) )
	{
		WinActivate,  %processName%                             
		WinMaximize, %processName%
	}
	else{
		; Run, matlab.exe
		ToolTip,  Matlab is NOT Opened, 20, 20
		SetTimer, RemoveTooltip, -2000
	}

}


openWebBased(processName  , titleNeedle ){
	; processName = "ahk_exe chrome.exe"
	

	title = ""
	WinGet windows, List , ahk_exe %processName%
	Found := 0
	
	Loop %windows%
	{
		id := windows%A_Index%
		WinGetTitle title, ahk_id %id%
		FileAppend, %title%, *
		If InStr( title , titleNeedle ){
			Found := 1
			Break
		}
	}
	
	if ( Found )
	{
		WinActivate,  %title%                             
		WinMaximize, %title%
	}
	else{
		Run, C:\Program Files\Google\Chrome\Application\chrome.exe
	}

}



openChrome(){
	processName = chrome.exe
	titleNeedle = Google Chrome
	
	openWebBased(processName  , titleNeedle )
}

openChatGpt(){
	processName = chrome.exe
	titleNeedle = ChatGPT (WPA) - 
	openWebBased( processName  , titleNeedle )
	
}



RALT & 1::openChrome()
RALT & 2::openChatGpt()
RALT & 3::openTErminal()
RALT & 4::openCode()
RALT & 5::openMatlab()


RemoveTooltip:
    Tooltip
return




; **************************  navigate AHKL **********************



#IfWinActive , ahk_class XamlExplorerHostIslandWindow  ; Win11
!k::Send {Blind}{Up}
!j::Send {Blind}{Down}
!h::Send {Blind}{Left}
!l::Send {Blind}{Right}
#IfWinActive




